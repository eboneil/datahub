/**
 * Copyright 2021 Acryl Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'base'
}

ext {
    python_executable = 'python3'
    venv_name = '.venv'
}

task checkPythonVersion(type: Exec) {
    commandLine python_executable, '-c', 'import sys; assert sys.version_info >= (3, 9)'
}

task environmentSetup(type: Exec, dependsOn: checkPythonVersion) {
    inputs.file file('pyproject.toml')
    inputs.file file('poetry.lock')
    outputs.dir("${venv_name}")
    commandLine 'bash', '-c',
        "${python_executable} -m venv ${venv_name} && " +
        "${venv_name}/bin/python -m pip install --upgrade pip wheel setuptools poetry==1.4.2"
}

task installPackage(type: Exec, dependsOn: [environmentSetup, ':metadata-ingestion:codegen']) {
    inputs.file file('pyproject.toml')
    inputs.file file('poetry.lock')
    outputs.file("${venv_name}/.build_install_sentinel")
    commandLine 'bash', '-x', '-c',
        "${venv_name}/bin/poetry config virtualenvs.in-project true && " +
        "${venv_name}/bin/poetry install --only main && " +
        "touch ${venv_name}/.build_install_sentinel"
}

task install(dependsOn: [installPackage])

task installDev(type: Exec, dependsOn: [install]) {
    inputs.file file('pyproject.toml')
    inputs.file file('poetry.lock')
    outputs.file("${venv_name}/.build_install_dev_sentinel")
    commandLine 'bash', '-x', '-c',
        "${venv_name}/bin/poetry install && " +
        "touch ${venv_name}/.build_install_dev_sentinel"
}

task lint(type: Exec, dependsOn: installDev) {
    commandLine 'bash', '-c',
        "set -x &&" +
        "${venv_name}/bin/poetry run black --check --diff src/ tests/ && " +
        "${venv_name}/bin/poetry run isort --check --diff src/ tests/ && " +
        "${venv_name}/bin/poetry run ruff --statistics src/ tests/ && " +
        "${venv_name}/bin/poetry run mypy src/ tests/"
}
task lintFix(type: Exec, dependsOn: installDev) {
    commandLine 'bash', '-c',
        "set -x &&" +
        "${venv_name}/bin/poetry run black src/ tests/ && " +
        "${venv_name}/bin/poetry run isort src/ tests/ && " +
        "${venv_name}/bin/poetry run ruff --fix src/ tests/ && " +
        "${venv_name}/bin/poetry run mypy src/ tests/"
}

task test(type: Exec, dependsOn: [installDev]) {
    commandLine 'bash', '-x', '-c',
        "${venv_name}/bin/poetry run pytest -vv --continue-on-collection-errors --junit-xml=junit.full.xml"
}

task cleanPythonCache(type: Exec) {
    commandLine 'bash', '-x', '-c',
        "find src -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete -o -type d -empty -delete"
}

build.dependsOn install
check.dependsOn lint
check.dependsOn test

clean {
    delete venv_name
    delete 'build'
    delete 'dist'
}
clean.dependsOn cleanPythonCache
