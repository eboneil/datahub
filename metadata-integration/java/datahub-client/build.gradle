plugins {
  id("com.palantir.git-version") apply false
}
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.hidetake.swagger.generator'
apply from: "../versioning.gradle"
import org.apache.tools.ant.filters.ReplaceTokens

jar.enabled = false // Since we only want to build shadow jars, disabling the regular jar creation

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
  // DO NOT DELETE. Required for SaaS version
  implementation project(':entity-registry')
  implementation project(':metadata-events:mxe-utils-avro-1.7')

  implementation project(':metadata-models')
  compile externalDependency.avro_1_7
  constraints {
    implementation('commons-collections:commons-collections:3.2.2') {
      because 'Vulnerability Issue'
    }
  }
  shadow externalDependency.httpAsyncClient // we want our clients to provide this
  implementation externalDependency.jacksonDataBind
  implementation externalDependency.javaxValidation
  implementation externalDependency.springContext
  implementation externalDependency.swaggerAnnotations
  implementation(externalDependency.kafkaAvroSerializer) {
    exclude group: "org.apache.avro"
  }

  compileOnly externalDependency.lombok
  annotationProcessor externalDependency.lombok
  testCompile externalDependency.httpAsyncClient // needed as shadow excludes it
  testCompile externalDependency.mockito
  testCompile externalDependency.mockServer
  testCompile externalDependency.mockServerClient
  testCompile externalDependency.testContainers

  swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.33'
}

//jacocoTestReport {
//    dependsOn test // tests are required to run before generating the report
//}

task copyAvroSchemas {
  dependsOn(':metadata-events:mxe-schemas:renameNamespace')
  copy {
    from file('../../../metadata-events/mxe-schemas/src/renamed/avro/com/linkedin/mxe/MetadataChangeProposal.avsc')
    into file('./src/main/resources')
  }
}

compileJava.dependsOn copyAvroSchemas


jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
}

test {
  // to avoid simultaneous executions of tests when complete build is run
  mustRunAfter(":metadata-io:test")
  useJUnit()
  finalizedBy jacocoTestReport
}

task checkShadowJar(type: Exec) {
  commandLine 'sh', '-c', 'scripts/check_jar.sh'
}


shadowJar {
  zip64=true
  archiveClassifier = ''
  // preventing java multi-release JAR leakage
  // https://github.com/johnrengelman/shadow/issues/729
  exclude('module-info.class', 'META-INF/versions/**',
          '**/LICENSE', '**/LICENSE.txt', '**/NOTICE', '**/NOTICE.txt')
  mergeServiceFiles()
  // we relocate namespaces manually, because we want to know exactly which libs we are exposing and why
  // we can move to automatic relocation using ConfigureShadowRelocation after we get to a good place on these first
  // acryl-main doesn't perform any re-locations. I don't exactly know why, but keeping this comment here for future readers
}

assemble {
  dependsOn shadowJar
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}


publishing {
  publications {
    shadow(MavenPublication) {
      publication -> project.shadow.component(publication)
        pom {
          name = 'Datahub Client'
          group = 'io.acryl'
          artifactId = 'datahub-client'
          description = 'DataHub Java client for metadata integration'
          url = 'https://datahubproject.io'
          artifacts = [ shadowJar, javadocJar, sourcesJar ]

          scm {
            connection = 'scm:git:git://github.com/datahub-project/datahub.git'
            developerConnection = 'scm:git:ssh://github.com:datahub-project/datahub.git'
            url = 'https://github.com/datahub-project/datahub.git'
          }

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'datahub'
              name = 'Datahub'
              email = 'datahub@acryl.io'
            }
          }
        }
    }
  }

  repositories {
    maven {
      def releasesRepoUrl = "https://acryl-795586375822.d.codeartifact.us-west-2.amazonaws.com/maven/acryl-datahub-client/"
      def snapshotsRepoUrl = "https://acryl-795586375822.d.codeartifact.us-west-2.amazonaws.com/maven/acryl-datahub-client/"
      credentials {
        username "aws"
        password System.getenv('CODEARTIFACT_AUTH_TOKEN')
      }
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = System.getenv("SIGNING_PASSWORD")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.shadow
}

tasks.register('generateOpenApiPojos', GenerateSwaggerCode) {
  it.setInputFile(
      file(
          "${project(':metadata-models').projectDir}/src/generatedJsonSchema/combined/open-api.yaml"
      )
  )
  it.setOutputDir(file("$projectDir/generated"))
  it.setLanguage("spring")
  it.setComponents(['models'])
  it.setTemplateDir(file("$projectDir/src/main/resources/JavaSpring"))
  it.setAdditionalProperties([
      "group-id" : "io.datahubproject",
      "dateLibrary" : "java8",
      "java8" : "true",
      "modelPropertyNaming" : "original",
      "modelPackage" : "io.datahubproject.openapi.generated"] as Map<String, String>)

  dependsOn ':metadata-models:generateJsonSchema'
}

compileJava.dependsOn generateOpenApiPojos
sourceSets.main.java.srcDir "${generateOpenApiPojos.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${generateOpenApiPojos.outputDir}/src/main/resources"

checkstyleMain.exclude '**/generated/**'