plugins {
    id("com.palantir.git-version") apply false
}
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.hidetake.swagger.generator'
import org.apache.tools.ant.filters.ReplaceTokens

jar.enabled = false // Since we only want to build shadow jars, disabling the regular jar creation

dependencies {
    // DO NOT DELETE. Required for SaaS version
    implementation project(':entity-registry')
    implementation project(':metadata-events:mxe-utils-avro-1.7')
   
    implementation project(':metadata-models')
    compile externalDependency.avro_1_7
    constraints {
      implementation('commons-collections:commons-collections:3.2.2') {
        because 'Vulnerability Issue'
      }
    }
    shadow externalDependency.httpAsyncClient // we want our clients to provide this
    implementation externalDependency.jacksonDataBind
    implementation externalDependency.javaxValidation
    implementation externalDependency.springContext
    implementation externalDependency.swaggerAnnotations
    implementation(externalDependency.kafkaAvroSerializer) {
      exclude group: "org.apache.avro"
    }
    
    compileOnly externalDependency.lombok
    annotationProcessor externalDependency.lombok
    testCompile externalDependency.httpAsyncClient // needed as shadow excludes it
    testCompile externalDependency.mockito
    testCompile externalDependency.mockServer
    testCompile externalDependency.mockServerClient
    testCompile externalDependency.testContainers

    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.33'
}

//jacocoTestReport {
//    dependsOn test // tests are required to run before generating the report
//}

task copyAvroSchemas {
  dependsOn(':metadata-events:mxe-schemas:renameNamespace')
  copy {
    from file('../../../metadata-events/mxe-schemas/src/renamed/avro/com/linkedin/mxe/MetadataChangeProposal.avsc')
    into file('./src/main/resources')
  }
}

compileJava.dependsOn copyAvroSchemas


def detailedVersionString = "0.0.0-unknown-SNAPSHOT"
def snapshotVersion = false
if (project.hasProperty("releaseVersion")) {
  version = releaseVersion
  detailedVersionString = releaseVersion
} else {
  try {
      // apply this plugin in a try-catch block so that we can handle cases without .git directory
      apply plugin: "com.palantir.git-version"
      def details = versionDetails()
      detailedVersionString = gitVersion()
      version = details.lastTag
      version = version.startsWith("v")? version.substring(1): version
      def suffix = details.isCleanTag? "": "-SNAPSHOT"
      snapshotVersion = ! details.isCleanTag
    }
    catch (Exception e) {
          e.printStackTrace()
          // last fall back
          version = detailedVersionString
      }
  }
    // trim version if it is of size 4 to size 3
    def versionParts = version.tokenize(".")
    if (versionParts.size() > 3) {
      // at-least 4 part version
      // we check if the 4th part is a .0 in which case we want to create a release
      if (versionParts[3] != '0') {
        snapshotVersion = true
      }
      versionParts = versionParts[0..2]
      version = versionParts[0..2].join('.')
    }

    if (snapshotVersion) {
        if (versionParts[versionParts.size()-1].isInteger()) {
          version = versionParts[0..versionParts.size()-2].join('.') + '.' + (versionParts[versionParts.size()-1].toInteger()+1).toString() + "-SNAPSHOT"
        } else {
          // we are unable to part the last token as an integer, so we just append SNAPSHOT to this version
          version = versionParts[0..versionParts.size()-1].join('.') + '-SNAPSHOT'
      }
    }

    processResources {
      filter(ReplaceTokens, tokens:[fullVersion: detailedVersionString])
    }

//test {
//  useJUnit()
//  finalizedBy jacocoTestReport
//}

shadowJar {
  zip64=true
  archiveClassifier = ''
  dependencies {
    exclude(dependency('org.apache.httpcomponents:httpasyncclient'))
    exclude 'LICENSE'
    exclude 'NOTICE'
    exclude 'LICENSE.txt'
  }
  mergeServiceFiles()
  // we relocate namespaces manually, because we want to know exactly which libs we are exposing and why
  // we can move to automatic relocation using ConfigureShadowRelocation after we get to a good place on these first
}

assemble {
    dependsOn shadowJar
}

task sourcesJar(type: Jar) {
     archiveClassifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}


publishing {
  publications {
    shadow(MavenPublication) {
      publication -> project.shadow.component(publication)
      pom {
        name = 'Datahub Client'
        group = 'io.acryl'
        artifactId = 'datahub-client'
        description = 'DataHub Java client for metadata integration'
        url = 'https://datahubproject.io'
        artifacts = [ shadowJar, javadocJar, sourcesJar ]

        scm {
          connection = 'scm:git:git://github.com/datahub-project/datahub.git'
          developerConnection = 'scm:git:ssh://github.com:datahub-project/datahub.git'
          url = 'https://github.com/datahub-project/datahub.git'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'datahub'
            name = 'Datahub'
            email = 'datahub@acryl.io'
          }
        }
      }
    }
  }

  repositories {
    maven {      
      def releasesRepoUrl = "https://acryl-795586375822.d.codeartifact.us-west-2.amazonaws.com/maven/acryl-datahub-client/"
      def snapshotsRepoUrl = "https://acryl-795586375822.d.codeartifact.us-west-2.amazonaws.com/maven/acryl-datahub-client/"
      credentials {
        username "aws"
        password System.getenv('CODEARTIFACT_AUTH_TOKEN')
      }
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = System.getenv("SIGNING_PASSWORD")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.shadow
}

tasks.register('generateOpenApiPojos', GenerateSwaggerCode) {
  it.setInputFile(
      file(
          "${project(':metadata-models').projectDir}/src/generatedJsonSchema/combined/open-api.yaml"
      )
  )
  it.setOutputDir(file("$projectDir/generated"))
  it.setLanguage("spring")
  it.setComponents(['models'])
  it.setTemplateDir(file("$projectDir/src/main/resources/JavaSpring"))
  it.setAdditionalProperties([
      "group-id" : "io.datahubproject",
      "dateLibrary" : "java8",
      "java8" : "true",
      "modelPropertyNaming" : "original",
      "modelPackage" : "io.datahubproject.openapi.generated"] as Map<String, String>)

  dependsOn ':metadata-models:generateJsonSchema'
}

compileJava.dependsOn generateOpenApiPojos
sourceSets.main.java.srcDir "${generateOpenApiPojos.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${generateOpenApiPojos.outputDir}/src/main/resources"

checkstyleMain.exclude '**/generated/**'
