query getDataProfiles($urn: String!, $limit: Int, $startTime: Long, $endTime: Long) {
    dataset(urn: $urn) {
        urn
        datasetProfiles(limit: $limit, startTimeMillis: $startTime, endTimeMillis: $endTime) {
            rowCount
            columnCount
            timestampMillis
            fieldProfiles {
                fieldPath
                uniqueCount
                uniqueProportion
                nullCount
                nullProportion
                min
                max
                mean
                median
                stdev
                sampleValues
            }
        }
    }
}

query getDataset($urn: String!) {
    dataset(urn: $urn) {
        ...nonSiblingDatasetFields
        siblings {
            isPrimary
            siblings {
                urn
                type
                ...nonSiblingDatasetFields
            }
        }
    }
}

fragment nonSiblingDatasetFields on Dataset {
    ...nonRecursiveDatasetFields
    schemaMetadata(version: 0) {
        ...schemaMetadataFields
    }
    editableSchemaMetadata {
        editableSchemaFieldInfo {
            fieldPath
            description
            globalTags {
                ...globalTagsFields
            }
            glossaryTerms {
                ...glossaryTerms
            }
        }
    }
    deprecation {
        actor
        deprecated
        note
        decommissionTime
    }
    globalTags {
        ...globalTagsFields
    }
    glossaryTerms {
        ...glossaryTerms
    }
    subTypes {
        typeNames
    }
    domain {
        ...entityDomain
    }
    parentContainers {
        ...parentContainersFields
    }
    usageStats(range: MONTH) {
        buckets {
            bucket
            duration
            resource
            metrics {
                uniqueUserCount
                totalSqlQueries
                topSqlQueries
            }
        }
        aggregations {
            uniqueUserCount
            totalSqlQueries
            users {
                user {
                    urn
                    type
                    username
                    properties {
                        displayName
                        firstName
                        lastName
                        fullName
                    }
                    editableProperties {
                        displayName
                        pictureLink
                    }
                }
                count
                userEmail
            }
            fields {
                fieldName
                count
            }
        }
    }
    datasetProfiles(limit: 1) {
        rowCount
        columnCount
        timestampMillis
        fieldProfiles {
            fieldPath
            uniqueCount
            uniqueProportion
            nullCount
            nullProportion
            min
            max
            mean
            median
            stdev
            sampleValues
        }
    }
    health {
        type
        status
        message
        causes
    }
    assertions(start: 0, count: 1) {
        total
    }
    operations(limit: 1) {
        timestampMillis
        lastUpdatedTimestamp
    }
    upstream: lineage(input: { direction: UPSTREAM, start: 0, count: 100 }) {
        ...partialLineageResults
    }
    downstream: lineage(input: { direction: DOWNSTREAM, start: 0, count: 100 }) {
        ...partialLineageResults
    }
    ...viewProperties
    autoRenderAspects: aspects(input: { autoRenderOnly: true }) {
        aspectName
        payload
        renderSpec {
            displayType
            displayName
            key
        }
    }
    status {
        removed
    }
    readRuns: runs(start: 0, count: 20, direction: INCOMING) {
        count
        start
        total
    }
    writeRuns: runs(start: 0, count: 20, direction: OUTGOING) {
        count
        start
        total
    }
    testResults {
        passing {
            test {
                ...testFields
            }
            type
        }
        failing {
            test {
                ...testFields
            }
            type
        }
    }
    statsSummary {
        queryCountLast30Days
        queryCountPercentileLast30Days
        queryCountRankLast30Days
        uniqueUserCountLast30Days
        uniqueUserPercentileLast30Days
        uniqueUserRankLast30Days
        topUsersLast30Days {
            urn
            type
            username
            properties {
                displayName
                firstName
                lastName
                fullName
            }
            editableProperties {
                displayName
                pictureLink
            }
        }
    }
    termProposals: proposals(type: TERM_ASSOCIATION) {
        urn
        type
        status
        result
        subResourceType
        subResource
        params {
            glossaryTermProposal {
                glossaryTerm {
                    ...glossaryTerm
                }
            }
        }
        created {
            time
            actor {
                urn
                type
                username
                info {
                    displayName
                    firstName
                    lastName
                    fullName
                }
                editableInfo {
                    pictureLink
                }
            }
        }
        lastModified {
            time
            actor {
                urn
                type
                username
                info {
                    displayName
                    firstName
                    lastName
                    fullName
                }
                editableInfo {
                    pictureLink
                }
            }
        }
    }
    tagProposals: proposals(type: TAG_ASSOCIATION) {
        urn
        type
        status
        result
        subResourceType
        subResource
        params {
            tagProposal {
                tag {
                    urn
                    type
                    name
                    description
                    properties {
                        colorHex
                    }
                }
            }
        }
        created {
            time
            actor {
                urn
                type
                username
                info {
                    displayName
                    firstName
                    lastName
                    fullName
                }
                editableInfo {
                    pictureLink
                }
            }
        }
        lastModified {
            time
            actor {
                urn
                type
                username
                info {
                    displayName
                    firstName
                    lastName
                    fullName
                }
                editableInfo {
                    pictureLink
                }
            }
        }
    }
    constraints {
        displayName
        description
        type
        isSatisfied
        reason
        params {
            hasGlossaryTermInNodeParams {
                nodeName
            }
        }
    }
    totalIncidents: incidents(start: 0, count: 1) {
        total
    }
    siblings {
        isPrimary
    }
}

fragment siblingFields on Dataset {
    ...nonRecursiveDatasetFields
    schemaMetadata(version: 0) {
        ...schemaMetadataFields
    }
    editableSchemaMetadata {
        editableSchemaFieldInfo {
            fieldPath
            description
            globalTags {
                ...globalTagsFields
            }
            glossaryTerms {
                ...glossaryTerms
            }
        }
    }
    deprecation {
        actor
        deprecated
        note
        decommissionTime
    }
    globalTags {
        ...globalTagsFields
    }
    glossaryTerms {
        ...glossaryTerms
    }
    subTypes {
        typeNames
    }
    domain {
        ...entityDomain
    }
    upstream: lineage(input: { direction: UPSTREAM, start: 0, count: 100 }) {
        ...fullLineageResults
    }
    downstream: lineage(input: { direction: DOWNSTREAM, start: 0, count: 100 }) {
        ...fullLineageResults
    }
    usageStats(resource: $urn, range: MONTH) {
        buckets {
            bucket
            duration
            resource
            metrics {
                uniqueUserCount
                totalSqlQueries
                topSqlQueries
            }
        }
        aggregations {
            uniqueUserCount
            totalSqlQueries
            users {
                user {
                    urn
                    username
                }
                count
                userEmail
            }
            fields {
                fieldName
                count
            }
        }
    }
    datasetProfiles(limit: 1) {
        rowCount
        columnCount
        timestampMillis
        fieldProfiles {
            fieldPath
            uniqueCount
            uniqueProportion
            nullCount
            nullProportion
            min
            max
            mean
            median
            stdev
            sampleValues
        }
    }
    parentContainers {
        ...parentContainersFields
    }
    ...viewProperties
    assertions(start: 0, count: 1) {
        total
    }
    operations(limit: 1) {
        timestampMillis
        lastUpdatedTimestamp
    }
    testResults {
        passing {
            test {
                ...testFields
            }
            type
        }
        failing {
            test {
                ...testFields
            }
            type
        }
    }
}

mutation updateDataset($urn: String!, $input: DatasetUpdateInput!) {
    updateDataset(urn: $urn, input: $input) {
        urn
    }
}

fragment viewProperties on Dataset {
    viewProperties {
        materialized
        logic
        language
    }
}

fragment assertionsQuery on Dataset {
    assertions(start: 0, count: 100) {
        start
        count
        total
        assertions {
            ...assertionDetails
            runEvents(status: COMPLETE, limit: 1) {
                total
                failed
                succeeded
                runEvents {
                    ...assertionRunEventDetails
                }
            }
        }
    }
}

query getDatasetAssertions($urn: String!) {
    dataset(urn: $urn) {
        ...assertionsQuery
        siblings {
            isPrimary
            siblings {
                urn
                type
                ...assertionsQuery
            }
        }
    }
}

query getDatasetRuns($urn: String!, $start: Int!, $count: Int!, $direction: RelationshipDirection!) {
    dataset(urn: $urn) {
        runs(start: $start, count: $count, direction: $direction) {
            ...runResults
        }
    }
}

query getIncidents($urn: String!, $start: Int!, $count: Int!, $state: IncidentState) {
    dataset(urn: $urn) {
        incidents(start: $start, count: $count, state: $state) {
            ...incidentsFields
        }
        siblings {
            isPrimary
            siblings {
                urn
                type
                ... on Dataset {
                    incidents(start: $start, count: $count, state: $state) {
                        ...incidentsFields
                    }
                }
            }
        }
    }
}
