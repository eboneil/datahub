extend type Mutation {
  """
  Create a new Dataset SLA Assertion
  """
  createDatasetSlaAssertion(input: CreateDatasetAssertionInput!): Assertion!

  """
  Create a new Data Job (Data Pipeline Task) SLA Assertion
  """
  createDataJobSlaAssertion(input: CreateDataJobAssertionInput!): Assertion!

  """
  Update an existing Data Job (Data Pipeline Task) SLA Assertion
  """
  updateDatasetSlaAssertion(urn: String!, input: UpdateDatasetSlaAssertionInput!): Assertion!

  """
  Update an existing Data Job (Data Pipeline Task) SLA Assertion
  """
  updateDataJobSlaAssertion(urn: String!, input: UpdateDataJobSlaAssertionInput!): Assertion!

  """
  Updates the action settings associated with a particular Assertion
  """
  updateAssertionActions(urn: String!, input: UpdateAssertionActionsInput!): Assertion!
}

# TODO
input CreateDatasetAssertionInput {
  exampleField: String!
}

# TODO
input CreateDataJobAssertionInput {
  exampleField: String!
}

# TODO
input UpdateDatasetSlaAssertionInput {
  exampleField: String!
}

# TODO
input UpdateDataJobSlaAssertionInput {
  exampleField: String!
}

# TODO
input UpdateAssertionActionsInput {
  exampleField: String!
}

"""
The source of an assertion
"""
enum AssertionSourceType {
  """
  The assertion was defined natively on DataHub by a user.
  """
  NATIVE
  """
  The assertion was defined and managed externally of DataHub.
  """
  EXTERNAL
  """
  The assertion was inferred, e.g. from offline AI / ML models.
  """
  INFERRED
}

"""
The type of an SLA assertion
"""
enum SlaAssertionType {
  """
  An assertion defined against a Dataset Change Operation - insert, update, delete, etc
  """
  DATASET_CHANGE_OPERATION
  """
  An assertion defined against a Data Job run success
  """
  DATA_JOB_RUN_SUCCESS
}

extend type AssertionInfo {
  """
  Information about an SLA Assertion
  """
  slaAssertion: SlaAssertionInfo

  """
  The source or origin of the Assertion definition.
  """
  source: AssertionSource

  """
  The evaluation schedule for the Assertion. If the type is INFERRED or NATIVE, this field will be populated
  """
  schedule: CronSchedule
}

"""
Information about an SLA assertion.
"""
type SlaAssertionInfo {
  """
  The urn of the entity that the SLA assertion is related to
  """
  entityUrn: String!

  """
  The type of the SLA Assertion
  """
  type: SlaAssertionType!

  """
  Produce WARN Assertion Result if the asset is not updated on the cadence and within the time range described by the schedule.
  """
  warnSchedule: SlaAssertionSchedule

  """
  Produce FAIL Assertion Result if the asset is not updated on the cadence and within the time range described by the schedule.
  """
  failSchedule: SlaAssertionSchedule
}

"""
Attributes defining a single SLA schedule.
"""
type SlaAssertionSchedule {
  """
  The type of schedule
  """
  type: SlaAssertionScheduleType!

  """
  A cron schedule. This is populated if the type is CRON.
  """
  cron: CronSchedule

  """
  A fixed interval schedule. This is populated if the type is FIXED_INTERVAL.
  """
  fixedInterval: FixedIntervalSchedule
}

"""
The type of an SLA assertion
"""
enum SlaAssertionScheduleType {
  """
  An schedule based on a CRON schedule representing the expected event times.
  """
  CRON
  """
  A scheduled based on a recurring fixed schedule which is used to compute the expected operation window. E.g. "every 24 hours".
  """
  FIXED_INTERVAL
}

"""
A cron-formatted schedule
"""
type CronSchedule {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los Angeles
  """
  timezone: String!

  """
  An optional offset in milliseconds to SUBTRACT from the timestamp generated by the cron schedule
  to generate the lower bounds of the "SLA window", or the window of time in which an event must have occurred in order for the SLA
  to be considering passing.
  If left empty, the start of the SLA window will be the _end_ of the previously evaluated SLA window.
  """
  windowStartOffsetMs: Long

  """
  An optional offset in milliseconds to ADD to the timestamp generated by the cron schedule
  to generate the upper bounds of the "SLA window", or the window of time in which an event must have occurred in order for the SLA
  to be considering passing.
  If left empty, the end of the SLA window will be the time corresponding to the provided cron schedule.
  """
  windowEndOffsetMs: Long
}

"""
A fixed interval schedule.
"""
type FixedIntervalSchedule {
  """
  Interval unit such as minute/hour/day etc.
  """
  unit: DateInterval!

  """
  How many units. Defaults to 1.
  """
  multiple: Int!
}

"""
The source of an Assertion
"""
type AssertionSource {
  """
  The source type
  """
  type: AssertionSourceType!
}