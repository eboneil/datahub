extend type Mutation {
  """
  Create an existing Dataset Assertion
  """
  createDatasetAssertion(input: CreateDatasetAssertionInput!): Assertion!

  """
  Create an new SLA Assertion
  """
  createSlaAssertion(input: CreateSlaAssertionInput!): Assertion!

  """
  Update an existing Dataset Assertion
  """
  updateDatasetAssertion(urn: String!, input: UpdateDatasetAssertionInput!): Assertion!

  """
  Update an existing SLA Assertion
  """
  updateSlaAssertion(urn: String!, input: UpdateSlaAssertionInput!): Assertion!
}

"""
Input for updating a Dataset Assertion
"""
input CreateDatasetAssertionInput {
  """
  The urn of the dataset that the assertion is related to
  """
  datasetUrn: String!

  """
  The scope of the Dataset assertion.
  """
  scope: DatasetAssertionScope!

  """
  The urns of schema fields associated with the columns being tested.
  """
  fieldUrns: [String!]

  """
  Standardized assertion operator
  """
  aggregation: AssertionStdAggregation

  """
  Standardized assertion operator
  """
  operator: AssertionStdOperator!

  """
  Standard parameters required for the assertion. e.g. min_value, max_value, value, columns
  """
  parameters: AssertionStdParametersInput

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Input for updating an SLA Assertion
"""
input CreateSlaAssertionInput {
  """
  The type of SLA assertion to create.
  """
  type: SlaAssertionType!

  """
  The urn of the dataset that the assertion is related to
  """
  entityUrn: String!

  """
  The SLA assertion's schedule
  """
  schedule: SlaAssertionScheduleInput!

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Input for updating a Dataset Assertion
"""
input UpdateDatasetAssertionInput {
  """
  The scope of the Dataset assertion.
  """
  scope: DatasetAssertionScope!

  """
  The urns of schema fields associated with the columns being tested.
  """
  fieldUrns: [String!]

  """
  Standardized assertion operator
  """
  aggregation: AssertionStdAggregation

  """
  Standardized assertion operator
  """
  operator: AssertionStdOperator!

  """
  Standard parameters required for the assertion. e.g. min_value, max_value, value, columns
  """
  parameters: AssertionStdParametersInput

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Input for updating an SLA Assertion
"""
input UpdateSlaAssertionInput {
  """
  The SLA assertion's schedule
  """
  schedule: SlaAssertionScheduleInput!

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Parameters for AssertionStdOperators
"""
input AssertionStdParametersInput {
  """
  The value parameter of an assertion
  """
  value: AssertionStdParameterInput

  """
  The maxValue parameter of an assertion
  """
  maxValue: AssertionStdParameterInput

  """
  The minValue parameter of an assertion
  """
  minValue: AssertionStdParameterInput
}

"""
Parameter for AssertionStdOperator.
"""
input AssertionStdParameterInput {
  """
  The parameter value
  """
  value: String!

  """
  The type of the parameter
  """
  type: AssertionStdParameterType!
}

"""
Input for updating the action settings associated with a particular Assertion
"""
input AssertionActionsInput {
  """
  Actions to be executed on successful assertion run.
  """
  onSuccess: [AssertionActionInput!]!

  """
  Actions to be executed on failed assertion run.
  """
  onFailure: [AssertionActionInput!]!
}

"""
Input for an SLA assertion schedule
"""
input SlaAssertionScheduleInput {
  """
  The type of schedule.
  """
  type: SlaAssertionScheduleType!

  """
  A cron schedule. This is populated if the type is CRON.
  """
  cron: SlaCronScheduleInput

  """
  A fixed interval schedule. This is populated if the type is FIXED_INTERVAL.
  """
  fixedInterval: FixedIntervalScheduleInput
}

"""
Input for a cron-formatted schedule
"""
input SlaCronScheduleInput {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los_Angeles
  """
  timezone: String!

  """
  An optional offset in milliseconds to SUBTRACT from the timestamp generated by the cron schedule
  to generate the lower bounds of the "SLA window", or the window of time in which an event must have occurred in order for the SLA
  to be considering passing.
  If left empty, the start of the SLA window will be the end of the previously evaluated SLA window.
  """
  windowStartOffsetMs: Long
}

"""
Input required to created a fixed interval schedule.
"""
input FixedIntervalScheduleInput {
  """
  Interval unit such as minute/hour/day etc.
  """
  unit: DateInterval!

  """
  How many units. Defaults to 1.
  """
  multiple: Int!
}

"""
The source of an assertion
"""
enum AssertionSourceType {
  """
  The assertion was defined natively on DataHub by a user.
  """
  NATIVE
  """
  The assertion was defined and managed externally of DataHub.
  """
  EXTERNAL
  """
  The assertion was inferred, e.g. from offline AI / ML models.
  """
  INFERRED
}

"""
The type of an SLA assertion
"""
enum SlaAssertionType {
  """
  An assertion defined against a Dataset Change Operation - insert, update, delete, etc
  """
  DATASET_CHANGE
  """
  An assertion defined against a Data Job run
  """
  DATA_JOB_RUN
}

extend type AssertionInfo {
  """
  Information about an SLA Assertion
  """
  slaAssertion: SlaAssertionInfo

  """
  The source or origin of the Assertion definition.
  """
  source: AssertionSource
}

extend type Assertion {
  """
  The actions associated with the Assertion
  """
  actions: AssertionActions
}

"""
Some actions associated with an assertion
"""
type AssertionActions {
  """
  Actions to be executed on successful assertion run.
  """
  onSuccess: [AssertionAction!]!

  """
  Actions to be executed on failed assertion run.
  """
  onFailure: [AssertionAction!]!
}

"""
An action associated with an assertion
"""
type AssertionAction {
  """
  The type of the actions
  """
  type: AssertionActionType!
}

"""
Input required to create an assertion action
"""
input AssertionActionInput {
  """
  The type of the actions
  """
  type: AssertionActionType!
}

"""
The type of the Action
"""
enum AssertionActionType {
  """
  Raise an incident.
  """
  RAISE_INCIDENT
  """
  Resolve open incidents related to the assertion.
  """
  RESOLVE_INCIDENT
}

"""
Information about an SLA assertion.
"""
type SlaAssertionInfo {
  """
  The urn of the entity that the SLA assertion is related to
  """
  entityUrn: String!

  """
  The type of the SLA Assertion
  """
  type: SlaAssertionType!

  """
  Produce FAIL Assertion Result if the asset is not updated on the cadence and within the time range described by the schedule.
  """
  schedule: SlaAssertionSchedule
}

"""
Attributes defining a single SLA schedule.
"""
type SlaAssertionSchedule {
  """
  The type of schedule
  """
  type: SlaAssertionScheduleType!

  """
  A cron schedule. This is populated if the type is CRON.
  """
  cron: SlaCronSchedule

  """
  A fixed interval schedule. This is populated if the type is FIXED_INTERVAL.
  """
  fixedInterval: FixedIntervalSchedule
}

"""
The type of an SLA assertion
"""
enum SlaAssertionScheduleType {
  """
  An schedule based on a CRON schedule representing the expected event times.
  """
  CRON

  """
  A scheduled based on a recurring fixed schedule which is used to compute the expected operation window. E.g. "every 24 hours".
  """
  FIXED_INTERVAL
}

"""
A cron-formatted schedule
"""
type SlaCronSchedule {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los Angeles
  """
  timezone: String!

  """
  An optional offset in milliseconds to SUBTRACT from the timestamp generated by the cron schedule
  to generate the lower bounds of the "SLA window", or the window of time in which an event must have occurred in order for the SLA
  to be considering passing.
  If left empty, the start of the SLA window will be the _end_ of the previously evaluated SLA window.
  """
  windowStartOffsetMs: Long
}

"""
A fixed interval schedule.
"""
type FixedIntervalSchedule {
  """
  Interval unit such as minute/hour/day etc.
  """
  unit: DateInterval!

  """
  How many units. Defaults to 1.
  """
  multiple: Int!
}

"""
The source of an Assertion
"""
type AssertionSource {
  """
  The source type
  """
  type: AssertionSourceType!
}