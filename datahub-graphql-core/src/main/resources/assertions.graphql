extend type Mutation {
  """
  Create an existing Dataset Assertion
  """
  createDatasetAssertion(input: CreateDatasetAssertionInput!): Assertion!

  """
  Create an new Freshness Assertion
  """
  createFreshnessAssertion(input: CreateFreshnessAssertionInput!): Assertion!

  """
  Update an existing Dataset Assertion
  """
  updateDatasetAssertion(urn: String!, input: UpdateDatasetAssertionInput!): Assertion!

  """
  Update an existing Freshness Assertion
  """
  updateFreshnessAssertion(urn: String!, input: UpdateFreshnessAssertionInput!): Assertion!

  """
  Update the actions for a given assertion.
  """
  updateAssertionActions(urn: String!, input: AssertionActionsInput!): Assertion!
}

"""
Input for updating a Dataset Assertion
"""
input CreateDatasetAssertionInput {
  """
  The urn of the dataset that the assertion is related to
  """
  datasetUrn: String!

  """
  The scope of the Dataset assertion.
  """
  scope: DatasetAssertionScope!

  """
  The urns of schema fields associated with the columns being tested.
  """
  fieldUrns: [String!]

  """
  Standardized assertion operator
  """
  aggregation: AssertionStdAggregation

  """
  Standardized assertion operator
  """
  operator: AssertionStdOperator!

  """
  Standard parameters required for the assertion. e.g. min_value, max_value, value, columns
  """
  parameters: AssertionStdParametersInput

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Input for creating an Freshness Assertion
"""
input CreateFreshnessAssertionInput {
  """
  The type of Freshness assertion to create.
  """
  type: FreshnessAssertionType!

  """
  The urn of the dataset that the assertion is related to
  """
  entityUrn: String!

  """
  The Freshness assertion's schedule
  """
  schedule: FreshnessAssertionScheduleInput!

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Input for updating a Dataset Assertion
"""
input UpdateDatasetAssertionInput {
  """
  The scope of the Dataset assertion.
  """
  scope: DatasetAssertionScope!

  """
  The urns of schema fields associated with the columns being tested.
  """
  fieldUrns: [String!]

  """
  Standardized assertion operator
  """
  aggregation: AssertionStdAggregation

  """
  Standardized assertion operator
  """
  operator: AssertionStdOperator!

  """
  Standard parameters required for the assertion. e.g. min_value, max_value, value, columns
  """
  parameters: AssertionStdParametersInput

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput

}

"""
Input for updating an Freshness Assertion
"""
input UpdateFreshnessAssertionInput {
  """
  The Freshness assertion's schedule
  """
  schedule: FreshnessAssertionScheduleInput!

  """
  Optional actions to apply on success or failure of the assertion
  """
  actions: AssertionActionsInput
}

"""
Parameters for AssertionStdOperators
"""
input AssertionStdParametersInput {
  """
  The value parameter of an assertion
  """
  value: AssertionStdParameterInput

  """
  The maxValue parameter of an assertion
  """
  maxValue: AssertionStdParameterInput

  """
  The minValue parameter of an assertion
  """
  minValue: AssertionStdParameterInput
}

"""
Parameter for AssertionStdOperator.
"""
input AssertionStdParameterInput {
  """
  The parameter value
  """
  value: String!

  """
  The type of the parameter
  """
  type: AssertionStdParameterType!
}

"""
Input for updating the action settings associated with a particular Assertion
"""
input AssertionActionsInput {
  """
  Actions to be executed on successful assertion run.
  """
  onSuccess: [AssertionActionInput!]!

  """
  Actions to be executed on failed assertion run.
  """
  onFailure: [AssertionActionInput!]!
}

"""
Input for an Freshness assertion schedule
"""
input FreshnessAssertionScheduleInput {
  """
  The type of schedule.
  """
  type: FreshnessAssertionScheduleType!

  """
  A cron schedule. This is populated if the type is CRON.
  """
  cron: FreshnessCronScheduleInput

  """
  A fixed interval schedule. This is populated if the type is FIXED_INTERVAL.
  """
  fixedInterval: FixedIntervalScheduleInput
}

"""
Input for a cron-formatted schedule
"""
input FreshnessCronScheduleInput {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los_Angeles
  """
  timezone: String!

  """
  An optional offset in milliseconds to SUBTRACT from the timestamp generated by the cron schedule
  to generate the lower bounds of the "Freshness window", or the window of time in which an event must have occurred in order for the Freshness
  to be considering passing.
  If left empty, the start of the Freshness window will be the end of the previously evaluated Freshness window.
  """
  windowStartOffsetMs: Long
}

"""
Input required to created a fixed interval schedule.
"""
input FixedIntervalScheduleInput {
  """
  Interval unit such as minute/hour/day etc.
  """
  unit: DateInterval!

  """
  How many units. Defaults to 1.
  """
  multiple: Int!
}

"""
The source of an assertion
"""
enum AssertionSourceType {
  """
  The assertion was defined natively on DataHub by a user.
  """
  NATIVE
  """
  The assertion was defined and managed externally of DataHub.
  """
  EXTERNAL
  """
  The assertion was inferred, e.g. from offline AI / ML models.
  """
  INFERRED
}

"""
The type of an Freshness assertion
"""
enum FreshnessAssertionType {
  """
  An assertion defined against a Dataset Change Operation - insert, update, delete, etc
  """
  DATASET_CHANGE
  """
  An assertion defined against a Data Job run
  """
  DATA_JOB_RUN
}

extend type AssertionInfo {
  """
  Information about an Freshness Assertion
  """
  freshnessAssertion: FreshnessAssertionInfo

  """
  The source or origin of the Assertion definition.
  """
  source: AssertionSource
}

extend type Assertion {
  """
  The actions associated with the Assertion
  """
  actions: AssertionActions
}

"""
Some actions associated with an assertion
"""
type AssertionActions {
  """
  Actions to be executed on successful assertion run.
  """
  onSuccess: [AssertionAction!]!

  """
  Actions to be executed on failed assertion run.
  """
  onFailure: [AssertionAction!]!
}

"""
An action associated with an assertion
"""
type AssertionAction {
  """
  The type of the actions
  """
  type: AssertionActionType!
}

"""
Input required to create an assertion action
"""
input AssertionActionInput {
  """
  The type of the actions
  """
  type: AssertionActionType!
}

"""
The type of the Action
"""
enum AssertionActionType {
  """
  Raise an incident.
  """
  RAISE_INCIDENT
  """
  Resolve open incidents related to the assertion.
  """
  RESOLVE_INCIDENT
}

"""
Information about an Freshness assertion.
"""
type FreshnessAssertionInfo {
  """
  The urn of the entity that the Freshness assertion is related to
  """
  entityUrn: String!

  """
  The type of the Freshness Assertion
  """
  type: FreshnessAssertionType!

  """
  Produce FAIL Assertion Result if the asset is not updated on the cadence and within the time range described by the schedule.
  """
  schedule: FreshnessAssertionSchedule!
}

"""
Attributes defining a single Freshness schedule.
"""
type FreshnessAssertionSchedule {
  """
  The type of schedule
  """
  type: FreshnessAssertionScheduleType!

  """
  A cron schedule. This is populated if the type is CRON.
  """
  cron: FreshnessCronSchedule

  """
  A fixed interval schedule. This is populated if the type is FIXED_INTERVAL.
  """
  fixedInterval: FixedIntervalSchedule
}

"""
The type of an Freshness assertion
"""
enum FreshnessAssertionScheduleType {
  """
  An schedule based on a CRON schedule representing the expected event times.
  """
  CRON

  """
  A scheduled based on a recurring fixed schedule which is used to compute the expected operation window. E.g. "every 24 hours".
  """
  FIXED_INTERVAL
}

"""
A cron-formatted schedule
"""
type FreshnessCronSchedule {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los Angeles
  """
  timezone: String!

  """
  An optional offset in milliseconds to SUBTRACT from the timestamp generated by the cron schedule
  to generate the lower bounds of the "Freshness window", or the window of time in which an event must have occurred in order for the Freshness
  to be considering passing.
  If left empty, the start of the Freshness window will be the _end_ of the previously evaluated Freshness window.
  """
  windowStartOffsetMs: Long
}

"""
A fixed interval schedule.
"""
type FixedIntervalSchedule {
  """
  Interval unit such as minute/hour/day etc.
  """
  unit: DateInterval!

  """
  How many units. Defaults to 1.
  """
  multiple: Int!
}

"""
The source of an Assertion
"""
type AssertionSource {
  """
  The source type
  """
  type: AssertionSourceType!
}
