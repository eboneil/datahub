extend type Query {
  """
  Fetches the settings for "system" monitors for an entity with a given URN.
  """
  systemMonitors(urn: String!): SystemMonitorsResult!
}

extend type Mutation {
  """
  Create a monitor that evaluates assertions
  """
  createAssertionMonitor(input: CreateAssertionMonitorInput!): Monitor!

  """
  Removes a monitor
  """
  deleteMonitor(urn: String!): Boolean

  """
  Updates the state of a "system" (e.g. anomaly) monitor.
  """
  updateSystemMonitors(input: UpdateSystemMonitorsInput!): Boolean!
}

"""
Information describing the system monitors enabled for a particular entity.
"""
type SystemMonitorsResult {
  """
  The monitors that have settings.
  """
  monitors: [SystemMonitor!]!
}

"""
A type of built-in system monitor, e.g. those that generate anomalies.
"""
enum SystemMonitorType {
  """
  An Freshness or Freshness monitor.
  """
  FRESHNESS
}

"""
Information about a specific system monitor.
"""
type SystemMonitor {
  """
  The type or category of system monitor
  """
  type: SystemMonitorType!

  """
  The actual underlying Monitor object used to evaluate the monitor
  """
  monitor: Monitor!
}

"""
Input required to update the settings for a set of system monitors
"""
input UpdateSystemMonitorsInput {
  """
  The urn of the entity for which to update system monitors.
  Note that Datasets are the only entity currently supported.

  The entity MUST exist, and the user must have the "Manage Monitors" privilege
  for the entity in order to change these settings.
  """
  entityUrn: String!

  """
  Settings for each system monitor type for the entity.

  It is expected that this is a unique set, where each entry
  in the set has a different SystemMonitorType.
  """
  monitors: [UpdateSystemMonitorInput!]!
}

"""
Input required to update the settings for a single system monitor
In the future, this object may be extended to have type-specific parameters or configuration.
"""
input UpdateSystemMonitorInput {
  """
  The type of the system monitor
  """
  type: SystemMonitorType!

  """
  The mode of operation for the system monitor.
  This determines whether the monitor is ACTIVE and running
  for the entity.
  """
  mode: MonitorMode!
}

"""
A monitor represents a process that monitors a Data Asset
"""
type Monitor implements Entity {
    """
    The primary key of the Monitor
    """
    urn: String!

    """
    The standard Entity Type
    """
    type: EntityType!

    """
    The entity being monitored
    """
    entity: Entity!

    """
    Key information about the monitor
    """
    info: MonitorInfo

    """
    Edges extending from this entity
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
Information about the monitor.
"""
type MonitorInfo {
    """
    The type of Monitor
    """
    type: MonitorType!

    """
    Information about an assertion evaluator monitor. Present if type is ASSERTION.
    """
    assertionMonitor: AssertionMonitor

    """
    Information about the current status of a Monitor.
    """
    status: MonitorStatus!
}

"""
A type of monitor
"""
enum MonitorType {
  """
  A monitor that evaluates assertions
  """
  ASSERTION
}

"""
Information about an assertion evaluator monitor.
"""
type AssertionMonitor {
    """
    The set of assertions to be evaluated by the monitor
    """
    assertions: [AssertionEvaluationSpec!]!
}

"""
Information required to evaluate an assertion
"""
type AssertionEvaluationSpec {
    """
    The assertion being evaluated
    """
    assertion: Assertion!

    """
    A cron schedule dictating when the assertion is evaluated.
    """
    schedule: CronSchedule!

    """
    Parameters required to evaluate the assertion
    """
    parameters: AssertionEvaluationParameters
}

"""
The type of assertion evaluation parameters
"""
enum AssertionEvaluationParametersType {
  """
  Parameters required to evaluate a Dataset Freshness Assertions
  """
  DATASET_FRESHNESS
}

"""
The parameters required to evaluate an assertion
"""
type AssertionEvaluationParameters {
  """
  The type of assertion evaluation parameters
  """
  type: AssertionEvaluationParametersType!

  """
  The parameters required to evaluate a dataset freshness assertion. Present if type is DATASET_FRESHNESS.
  """
  datasetFreshnessParameters: DatasetFreshnessAssertionParameters
}

"""
The parameters required to evaluate a dataset freshness assertion. Present if type is DATASET_FRESHNESS.
"""
type DatasetFreshnessAssertionParameters {
    """
    The source of the change operation.
    """
    sourceType: DatasetFreshnessSourceType!

    """
    Information about the field to use. Present when sourceType is FIELD_VALUE
    """
    field: SchemaFieldSpec

    """
    Determine that a change has occurred by inspecting an audit log API
    """
    auditLog: AuditLogSpec
}

"""
The source of the change operation.
"""
enum DatasetFreshnessSourceType {
  """
  Determine that a change has occurred by inspecting a particular field, e.g. a timestamp column.
  """
  FIELD_VALUE

  """
  Determine that a change has occurred by inspecting an information schema table, or other system metadata table.
  """
  INFORMATION_SCHEMA

  """
  Determine that a change has occurred by inspecting an audit log API
  """
  AUDIT_LOG
}

"""
Information about the field to use in an assertion
"""
type SchemaFieldSpec {
  """
  The field path
  """
  path: String!

  """
  The DataHub standard schema field type.
  """
  type: String!

  """
  The native field type
  """
  nativeType: String!
}

"""
Information about the audit log operations to use in an assertion
"""
type AuditLogSpec {
  """
  The list of operation types that should be monitored. If not provided, a default set will be used.
  """
  operationTypes: [String!]

  """
  Optional: The user name associated with the operation.
  """
  userName: String
}

"""
A cron schedule
"""
type CronSchedule {
  """
  A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
  """
  cron: String!

  """
  Timezone in which the cron interval applies, e.g. America/Los_Angeles
  """
  timezone: String!
}

"""
The operational mode of a monitor
"""
enum MonitorMode {
  """
  The monitor is actively operating
  """
  ACTIVE

  """
  The monitor is disabled, or not actively operating
  """
  INACTIVE
}

"""
Details about the status of a monitor.
"""
type MonitorStatus {
  """
  The operational mode of the monitor
  """
  mode: MonitorMode!
}

"""
Input for a cron schedule
"""
input CronScheduleInput {
    """
    A cron-formatted execution interval, as a cron string, e.g. 1 * * * *
    """
    cron: String!

    """
    Timezone in which the cron interval applies, e.g. America/Los_Angeles
    """
    timezone: String!
}

"""
The parameters required to evaluate an assertion
"""
input AssertionEvaluationParametersInput {
    """
    The type of assertion evaluation parameters
    """
    type: AssertionEvaluationParametersType!

    """
    The parameters required to evaluate a dataset freshness assertion. Present if type is DATASET_FRESHNESS.
    """
    datasetFreshnessParameters: DatasetFreshnessAssertionParametersInput
}

"""
Input for the parameters required to evaluate a dataset freshness assertion. Present if type is DATASET_FRESHNESS.
"""
input DatasetFreshnessAssertionParametersInput {
    """
    The source of the change operation.
    """
    sourceType: DatasetFreshnessSourceType!

    """
    Information about the field to use. Present when sourceType is FIELD_VALUE
    """
    field: SchemaFieldSpecInput

    """
    Determine that a change has occurred by inspecting an audit log API
    """
    auditLog: AuditLogSpecInput
}

"""
Input for information about the field to use in an assertion
"""
input SchemaFieldSpecInput {
    """
    The field path
    """
    path: String!

    """
    The DataHub standard schema field type.
    """
    type: String!

    """
    The native field type
    """
    nativeType: String!
}

"""
Input for information about the audit log operations to use in an assertion
"""
input AuditLogSpecInput {
    """
    The list of operation types that should be monitored. If not provided, a default set will be used.
    """
    operationTypes: [String!]

    """
    Optional: The user name associated with the operation.
    """
    userName: String
}

"""
Input for creating an Assertion Monitor. Assumes that the assertion under monitor has already been created.
"""
input CreateAssertionMonitorInput {

    """
    The urn of the entity being monitored.
    This should exactly match the urn of the entity against which the assertion was defined.
    """
    entityUrn: String!

    """
    The assertion to be evaluated
    """
    assertionUrn: String!

    """
    A cron schedule dictating when the assertion is evaluated.
    """
    schedule: CronScheduleInput!

    """
    Parameters required to evaluate the assertion
    """
    parameters: AssertionEvaluationParametersInput
}
