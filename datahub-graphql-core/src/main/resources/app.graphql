# DataHub UI Application-Specific GraphQL Types

extend type Query {
  """
  Fetch details associated with the authenticated user, provided via an auth cookie or header
  """
  me: AuthenticatedUser

  """
  Fetch configurations
  Used by DataHub UI
  """
  appConfig: AppConfig

  """
  Global (platform-level) settings for DataHub.
  Requires the 'Manage Platform Settings' Platform Privilege.
  """
  globalSettings: GlobalSettings


  """
  Fetch the Global Settings related to the Views feature.
  Requires the 'Manage Global Views' Platform Privilege.
  """
  globalViewsSettings: GlobalViewsSettings
}

extend type Mutation {
  """
  Update the Global Settings for the Platform.
  Requires the 'Manage Platform Settings' Platform Privilege.
  """
  updateGlobalSettings(input: UpdateGlobalSettingsInput!): Boolean!

  """
  Update the global settings related to the Views feature.
  Requires the 'Manage Global Views' Platform Privilege.
  """
  updateGlobalViewsSettings(input: UpdateGlobalViewsSettingsInput!): Boolean!
}

"""
Information about the currently authenticated user
"""
type AuthenticatedUser {
  """
  The user information associated with the authenticated user, including properties used in rendering the profile
  """
  corpUser: CorpUser!

  """
  The privileges assigned to the currently authenticated user, which dictates which parts of the UI they should be able to use
  """
  platformPrivileges: PlatformPrivileges!
}

"""
The platform privileges that the currently authenticated user has
"""
type PlatformPrivileges {
  """
  Whether the user should be able to view analytics
  """
  viewAnalytics: Boolean!

  """
  Whether the user should be able to manage policies
  """
  managePolicies: Boolean!

  """
  Whether the user should be able to view metadata proposals.
  """
  viewMetadataProposals: Boolean!

  """
  Whether the user should be able to manage users & groups
  """
  manageIdentities: Boolean!

  """
  Whether the user should be able to generate personal access tokens
  """
  generatePersonalAccessTokens: Boolean!

  """
  Whether the user should be able to create new Domains
  """
  createDomains: Boolean!

  """
  Whether the user should be able to manage Domains
  """
  manageDomains: Boolean!

  """
  Whether the user is able to manage UI-based ingestion
  """
  manageIngestion: Boolean!

  """
  Whether the user is able to manage UI-based secrets
  """
  manageSecrets: Boolean!

  """
  Whether the user should be able to manage tokens on behalf of other users.
  """
  manageTokens: Boolean!

  """
  Whether the user is able to manage Tests
  """
  manageTests: Boolean!

  """
  Whether the user should be able to manage Glossaries
  """
  manageGlossaries: Boolean!

  """
  Whether the user is able to manage user credentials
  """
  manageUserCredentials: Boolean!

  """
  SaaS-only: Whether the user is able to manage global platform settings
  """
  manageGlobalSettings: Boolean!

  """
  Whether the user should be able to create new Tags
  """
  createTags: Boolean!

  """
  Whether the user should be able to create and delete all Tags
  """
  manageTags: Boolean!

  """
  Whether the user should be able to create, update, and delete global views.
  """
  manageGlobalViews: Boolean!
}

"""
Config loaded at application boot time
This configuration dictates the behavior of the UI, such as which features are enabled or disabled
"""
type AppConfig {
  """
  App version
  """
  appVersion: String

  """
  Auth-related configurations
  """
  authConfig: AuthConfig!

  """
  Configurations related to the Analytics Feature
  """
  analyticsConfig: AnalyticsConfig!

  """
  Configurations related to the Policies Feature
  """
  policiesConfig: PoliciesConfig!

  actionRequestsConfig: ActionRequestsConfig!

  """
  Configurations related to the User & Group management
  """
  identityManagementConfig: IdentityManagementConfig!

  """
  Configurations related to UI-based ingestion
  """
  managedIngestionConfig: ManagedIngestionConfig!

  """
  Configurations related to Lineage
  """
  lineageConfig: LineageConfig!

  """
  Configurations related to visual appearance, allows styling the UI without rebuilding the bundle
  """
  visualConfig: VisualConfig!

  """
  Configurations related to tracking users in the app
  """
  telemetryConfig: TelemetryConfig!

  """
  Configurations related to DataHub tests
  """
  testsConfig: TestsConfig!

  """
  Configurations related to DataHub Views
  """
  viewsConfig: ViewsConfig!

  """
  Configuration related to the DataHub Chrome Extension
  """
  chromeExtensionConfig: ChromeExtensionConfig!
}

"""
Configurations related to visual appearance of the app
"""
type VisualConfig {
  """
  Custom logo url for the homepage & top banner
  """
  logoUrl: String

  """
  Custom favicon url for the homepage & top banner
  """
  faviconUrl: String

  """
  Boolean flag disabling viewing the Business Glossary page for users without the 'Manage Glossaries' privilege
  """
  hideGlossary: Boolean

  """
  Configuration for the queries tab
  """
  queriesTab: QueriesTabConfig
}

"""
Configuration for the queries tab
"""
type QueriesTabConfig {
  """
  Number of queries to show in the queries tab
  """
  queriesTabResultSize: Int
}

"""
Configurations related to tracking users in the app
"""
type TelemetryConfig {
  """
  Env variable for whether or not third party logging should be enabled for this instance
  """
  enableThirdPartyLogging: Boolean
}

"""
Configurations related to Lineage
"""
type LineageConfig {
  """
  Whether the backend support impact analysis feature
  """
  supportsImpactAnalysis: Boolean!
}

"""
Configurations related to the Analytics Feature
"""
type AnalyticsConfig {
  """
  Whether the Analytics feature is enabled and should be displayed
  """
  enabled: Boolean!
}

"""
Configurations related to auth
"""
type AuthConfig {
  """
  Whether token-based auth is enabled.
  """
  tokenAuthEnabled: Boolean!
}

"""
Configurations related to the Policies Feature
"""
type PoliciesConfig {
  """
  Whether the policies feature is enabled and should be displayed in the UI
  """
  enabled: Boolean!

  """
  A list of platform privileges to display in the Policy Builder experience
  """
  platformPrivileges: [Privilege!]!

  """
  A list of resource privileges to display in the Policy Builder experience
  """
  resourcePrivileges: [ResourcePrivileges!]!
}

"""
An individual DataHub Access Privilege
"""
type Privilege {
  """
  Standardized privilege type, serving as a unique identifier for a privilege eg EDIT_ENTITY
  """
  type: String!

  """
  The name to appear when displaying the privilege, eg Edit Entity
  """
  displayName: String

  """
  A description of the privilege to display
  """
  description: String
}

"""
A privilege associated with a particular resource type
A resource is most commonly a DataHub Metadata Entity
"""
type ResourcePrivileges {
  """
  Resource type associated with the Access Privilege, eg dataset
  """
  resourceType: String!

  """
  The name to used for displaying the resourceType
  """
  resourceTypeDisplayName: String

  """
  An optional entity type to use when performing search and navigation to the entity
  """
  entityType: EntityType

  """
  A list of privileges that are supported against this resource
  """
  privileges: [Privilege!]!
}

"""
Configurations related to Identity Management
"""
type IdentityManagementConfig {
  """
  Whether identity management screen is able to be shown in the UI
  """
  enabled: Boolean!
}

"""
Configurations related to managed, UI based ingestion
"""
type ManagedIngestionConfig {
  """
  Whether ingestion screen is enabled in the UI
  """
  enabled: Boolean!
}

"""
Configurations related to DataHub Tests feature
"""
type TestsConfig {
  """
  Whether Tests feature is enabled
  """
  enabled: Boolean!
}

"""
Global (platform-level) settings.
"""
type GlobalSettings {
  """
  Global Integration Settings
  """
  integrationSettings: GlobalIntegrationSettings!

  """
  Global Notification Settings
  """
  notificationSettings: GlobalNotificationSettings!

  """
  Global SSO Settings
  """
  ssoSettings: SsoSettings
}

"""
Global (platform-level) integrations settings.
"""
type GlobalIntegrationSettings {
  """
  Slack-related settings.
  """
  slackSettings: SlackIntegrationSettings
}

"""
Slack integration settings.
"""
type SlackIntegrationSettings {
  """
  Whether the slack integration is enabled or not.
  """
  enabled: Boolean!

  """
  A bot token used for sending notifications
  """
  botToken: String

  """
  A default slack channel to route to.
  """
  defaultChannelName: String
}

"""
Global (platform-level) notification settings.
"""
type GlobalNotificationSettings {
  """
  The notification settings themselves.
  """
  settings: [NotificationSetting!]!
}

"""
Global (platform-level) SSO settings.
"""
type SsoSettings {
  """
  OIDC settings. May or may not be filled in
  """
  oidcSettings: OidcSettings
}

type OidcSettings {
  """
  Whether OIDC SSO is enabled.
  """
  enabled: Boolean!

  """
  Unique client id issued by the identity provider.
  """
  clientId: String!

  """
  Unique client secret issued by the identity provider.
  """
  clientSecret: String!

  """
  The IdP OIDC discovery url.
  """
  discoveryUri: String!

  """
  ADVANCED. The attribute / claim used to derive the DataHub username. Defaults to "preferred_username".
  """
  userNameClaim: String

  """
  ADVANCED. String representing the requested scope from the IdP. Defaults to "oidc email profile"
  """
  scope: String

  """
  ADVANCED. Which authentication method to use to pass credentials (clientId and clientSecret) to the token endpoint: Defaults to "client_secret_basic".
  """
  clientAuthenticationMethod: String

  """
  ADVANCED. Whether DataHub users should be provisioned on login if they do not exist. Defaults to true.
  """
  jitProvisioningEnabled: Boolean

  """
  ADVANCED. Whether the user should already exist in DataHub on login, failing login if they are not. Defaults to false.
  """
  preProvisioningRequired: Boolean

  """
  ADVANCED. Whether groups should be extracted from a claim in the OIDC profile. Only applies if JIT provisioning is enabled. Groups will be created if they do not exist. Defaults to true.
  """
  extractGroupsEnabled: Boolean

  """
  ADVANCED. The OIDC claim to extract groups information from. Defaults to 'groups'
  """
  groupsClaim: String

  """
  ADVANCED. Response type.
  """
  responseType: String

  """
  ADVANCED. Response mode.
  """
  responseMode: String

  """
  ADVANCED. Use Nonce
  """
  useNonce: Boolean

  """
  ADVANCED. Read timeout.
  """
  readTimeout: Long

  """
  ADVANCED. Whether to extract claims from JWT access token. Defaults to false.
  """
  extractJwtAccessTokenClaims: Boolean

}

"""
A setting for a single notification type.
"""
type NotificationSetting {
  """
  The type of notification that the setting is for.
  """
  type: NotificationScenarioType!

  """
  The setting value: enabled or disabled.
  """
  value: NotificationSettingValue!

  """
  A set of option params, e.g. slack.channel, slack.enabled.
  """
  params: [StringMapEntry!]
}

"""
A single scenario type for a notification
"""
enum NotificationScenarioType {
  """
  Notification when an entity tag changes.
  """
  ENTITY_TAG_CHANGE

  """
  Notification when an entity glossary term changes.
  """
  ENTITY_GLOSSARY_TERM_CHANGE

  """
  Notification when an entity owner changes.
  """
  ENTITY_OWNER_CHANGE

  """
  Notification when an entity domain changes.
  """
  ENTITY_DOMAIN_CHANGE

  """
  Notification when an entity deprecation changes.
  """
  ENTITY_DEPRECATION_CHANGE

  """
  Notification when an dataset schema changes.
  """
  DATASET_SCHEMA_CHANGE

  """
  Notification when a new incident is raised.
  """
  NEW_INCIDENT

  """
  Notification when an incident's status changes.
  """
  INCIDENT_STATUS_CHANGE

  """
  Notification when a new proposal is raised.
  """
  NEW_PROPOSAL

  """
  Notification when a proposal's status changes.
  """
  PROPOSAL_STATUS_CHANGE

  """
  Notification when an ingestion run changes.
  """
  INGESTION_RUN_CHANGE
}

"""
A single scenario type for a notification
"""
enum NotificationSettingValue {
  """
  Setting is enabled.
  """
  ENABLED

  """
  Setting is disabled.
  """
  DISABLED
}

"""
Input required to update Global Settings.
"""
input UpdateGlobalSettingsInput {
  """
  Input required to update integration settings
  """
  integrationSettings: UpdateGlobalIntegrationSettingsInput

  """
  Input required to update notifications settings
  """
  notificationSettings: UpdateGlobalNotificationSettingsInput
  """
  Input required to update SSO settings
  """
  ssoSettings: UpdateSsoSettingsInput
}

"""
Input required to update Integration Settings.
"""
input UpdateGlobalIntegrationSettingsInput {
  """
  Input required to update Slack Integration Settings
  """
  slackSettings: UpdateSlackIntegrationSettingsInput
}

"""
Input required to update Slack settings.
"""
input UpdateSlackIntegrationSettingsInput {
  """
  Whether the slack integration is enabled or not.
  """
  enabled: Boolean!

  """
  A default slack channel to route to.
  """
  defaultChannelName: String

  """
  Optional - a bot token to use. This will be encrypted on DataHub backend.
  """
  botToken: String
}

"""
Input required to update Notification Settings.
"""
input UpdateGlobalNotificationSettingsInput {
  """
  Update all integration settings
  """
  settings: [NotificationSettingInput!]!
}

"""
Input required to update a single notification setting.
"""
input NotificationSettingInput {
  """
  The type of notification that the setting is for.
  """
  type: NotificationScenarioType!

  """
  The setting value: enabled or disabled.
  """
  value: NotificationSettingValue!

  """
  A set of option params, e.g. slack.channel, slack.enabled.
  """
  params: [StringMapEntryInput!]
}

"""
Input required to update SSO Settings.
"""
input UpdateSsoSettingsInput {
  """
  Auth base URL.
  """
  baseUrl: String!

  """
  Input required to update OIDC SSO Settings
  """
  oidcSettings: UpdateOidcSettingsInput
}

"""
Input required to OIDC SSO settings.
"""
input UpdateOidcSettingsInput {
  """
  Whether OIDC SSO is enabled.
  """
  enabled: Boolean!

  """
  Unique client id issued by the identity provider.
  """
  clientId: String!

  """
  Unique client secret issued by the identity provider.
  """
  clientSecret: String!

  """
  The IdP OIDC discovery url.
  """
  discoveryUri: String!

  """
  ADVANCED. The attribute / claim used to derive the DataHub username. Defaults to "preferred_username".
  """
  userNameClaim: String

  """
  ADVANCED. String representing the requested scope from the IdP. Defaults to "oidc email profile"
  """
  scope: String

  """
  ADVANCED. Which authentication method to use to pass credentials (clientId and clientSecret) to the token endpoint: Defaults to "client_secret_basic".
  """
  clientAuthenticationMethod: String

  """
  ADVANCED. Whether DataHub users should be provisioned on login if they do not exist. Defaults to true.
  """
  jitProvisioningEnabled: Boolean

  """
  ADVANCED. Whether the user should already exist in DataHub on login, failing login if they are not. Defaults to false.
  """
  preProvisioningRequired: Boolean

  """
  ADVANCED. Whether groups should be extracted from a claim in the OIDC profile. Only applies if JIT provisioning is enabled. Groups will be created if they do not exist. Defaults to true.
  """
  extractGroupsEnabled: Boolean

  """
  ADVANCED. The OIDC claim to extract groups information from. Defaults to 'groups'
  """
  groupsClaim: String

  """
  ADVANCED. Response type.
  """
  responseType: String

  """
  ADVANCED. Response mode.
  """
  responseMode: String

  """
  ADVANCED. Use Nonce
  """
  useNonce: Boolean

  """
  ADVANCED. Read timeout.
  """
  readTimeout: Long

  """
  ADVANCED. Whether to extract claims from JWT access token. Defaults to false.
  """
  extractJwtAccessTokenClaims: Boolean
}
"""
Configurations related to DataHub Views feature
"""
type ViewsConfig {
  """
  Whether Views feature is enabled
  """
  enabled: Boolean!
}

"""
Input required to update Global View Settings.
"""
input UpdateGlobalViewsSettingsInput {
  """
  The URN of the View that serves as the Global, or organization-wide, default.
  If this field is not provided, the existing Global Default will be cleared.
  """
  defaultView: String
}

"""
Global (platform-level) settings related to the Views feature
"""
type GlobalViewsSettings {
  """
  The global default View. If a user does not have a personal default, then
  this will be the default view.
  """
  defaultView: String
}

"""
Configurations related to DataHub Chrome extension
"""
type ChromeExtensionConfig {
  """
  Whether the Chrome Extension is enabled
  """
  enabled: Boolean!

  """
  Whether lineage is enabled
  """
  lineageEnabled: Boolean!
}
