extend type Dataset {
    """
    Proposed tags and terms on the given entity
    """
    proposals(type: ActionRequestType!, status: ActionRequestStatus): [ActionRequest!]
}

extend type Query {
    """
    Fetch all rejected action requests
    """
    listRejectedActionRequests(input: ListRejectedActionRequestsInput!): ListRejectedActionRequestsResult
}

type ActionRequestsConfig {
    """
    Whether the action requests feature is enabled.
    """
    enabled: Boolean!
}
enum ActionRequestType {
    """
    Requests to associate a tag with an entity or sub resource
    """
    TAG_ASSOCIATION
    """
    Requests to associate a term with an entity or sub resource
    """
    TERM_ASSOCIATION
    """
    Requests to create a glossary term
    """
    CREATE_GLOSSARY_TERM
    """
    Requests to create a glossary node
    """
    CREATE_GLOSSARY_NODE
    """
    Requests to update a description
    """
    UPDATE_DESCRIPTION
}
enum ActionRequestStatus {
    """
    The action request is pending action
    """
    PENDING
    """
    An action request has been completed
    """
    COMPLETED
}
enum ActionRequestResult {
    """
    The action request is accepted
    """
    ACCEPTED
    """
    An action request has been rejected
    """
    REJECTED
}
input ListActionRequestsInput {
    """
    Start offset of the result set
    """
    start: Int
    """
    Number of results to return in the result set
    """
    count: Int
    """
    An optional type filter
    """
    type: ActionRequestType
    """
    An optional Status filter
    """
    status: ActionRequestStatus
    """
    An optional action request assignee to filter by. If not provided, all
    action requests that the authenticated user is assigned to will be returned.
    """
    assignee: ActionRequestAssignee
    """
    An optional starting time to filter on
    """
    startTimestampMillis: Long
    """
    An optional ending time to filter on
    """
    endTimestampMillis: Long
}

input ActionRequestAssignee {
    """
    The type of the assignee, either user or group
    """
    type: AssigneeType!
    """
    The urn of the assignee
    """
    urn: String!
}

type ListActionRequestsResult {
    """
    Start offset of the result set
    """
    start: Int
    """
    Number of results to return in the result set
    """
    count: Int
    """
    The total number of action requests
    """
    total: Int
    """
    A list of groupings of action requests for a user
    """
    actionRequests: [ActionRequest!]!
}

input ListRejectedActionRequestsInput {
    """
    Start offset of the result set
    """
    start: Int
    """
    Number of results to return in the result set
    """
    count: Int
    """
    An optional type filter
    """
    type: ActionRequestType
    """
    An optional starting time to filter on
    """
    startTimestampMillis: Long
    """
    An optional ending time to filter on
    """
    endTimestampMillis: Long
}

type ListRejectedActionRequestsResult {
    """
    Start offset of the result set
    """
    start: Int
    """
    Number of results to return in the result set
    """
    count: Int
    """
    The total number of rejected action requests
    """
    total: Int
    """
    A list of rejected action requests
    """
    rejectedActionRequests: [ActionRequest!]!
}

"""
A request for a user or group to perform a particular action, for example
reviewing and approving tag or glossary term associations
"""
type ActionRequest {
    """
    The urn associated with the action request
    """
    urn: String!
    """
    The type of the action request
    """
    type: ActionRequestType!
    """
    The status of the action request
    """
    status: ActionRequestStatus!
    """
    The status of the action request
    """
    result: ActionRequestResult
    """
    The users assigned to the action request
    """
    assignedUsers: [String!]
    """
    The groups assigned to the action request
    """
    assignedGroups: [String!]
    """
    An optional target entity associated with the action request
    """
    entity: Entity
    """
    The sub-resource type associated with the action request, for example datasetField.
    """
    subResourceType: String
    """
    The sub-resource identifier associated with the action request, for example a fieldName.
    """
    subResource: String
    """
    Optional set of action request arguments specific to the action request type
    """
    params: ActionRequestParams
    """
    The time by which the action is required
    """
    dueDate: Long
    """
    The time and actor which initiated the action request
    """
    created: ResolvedAuditStamp!
    """
    The time and actor which last modified the action request
    """
    lastModified: ResolvedAuditStamp
    """
    Resource level properties for the action request
    """
    resourceProperties: ActionRequestResourceProperties
    """
    Sub-resource level properties for the action request
    """
    subResourceProperties: ActionRequestSubResourceProperties
}

type ActionRequestParams {
    """
    Glossary Term specific arguments
    """
    glossaryTermProposal: GlossaryTermProposalParams
    """
    Tag-proposal specific arguments
    """
    tagProposal: TagProposalParams
    """
    Creating a Glossary Term specific arguments
    """
    createGlossaryTermProposal: CreateGlossaryTermProposalParams
    """
    Creating a Glossary Node specific arguments
    """
    createGlossaryNodeProposal: CreateGlossaryNodeProposalParams
    """
    Updating a Description specific arguments
    """
    updateDescriptionProposal: UpdateDescriptionProposalParams
}

enum AssigneeType {
    USER,
    GROUP
}

type TagProposalParams {
    """
    The urn of the proposed tag
    """
    tag: Tag!
}

type GlossaryTermProposalParams {
    """
    The urn of the proposed term
    """
    glossaryTerm: GlossaryTerm!
}

type CreateGlossaryTermProposalParams {
    """
    The info for a proposed Glossary Term
    """
    glossaryTerm: CreateGlossaryEntityProposalProperties!
}

type CreateGlossaryNodeProposalParams {
    """
    The info for a proposed Glossary Node
    """
    glossaryNode: CreateGlossaryEntityProposalProperties!
}

type CreateGlossaryEntityProposalProperties {
    """
    The name for a proposed Glossary Entity
    """
    name: String!

    """
    The optional parent node for a proposed Glossary Entity
    """
    parentNode: GlossaryNode
}

type UpdateDescriptionProposalParams {
    """
    The proposed updated description
    """
    description: String!
}

"""
Resource level properties for an action request.
"""
type ActionRequestResourceProperties {
    """
    Glossary terms that are applied to the resource
    """
    glossaryTerms: GlossaryTerms
    """
    Tags that are applied to the resource
    """
    tags: GlobalTags
}

"""
Sub-resource level properties for an action request.
"""
type ActionRequestSubResourceProperties {
    """
    Glossary terms that are applied to the sub-resource.
    """
    glossaryTerms: GlossaryTerms
    """
    Tags that are applied to the sub-resource.
    """
    tags: GlobalTags
}